// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/info": {
            "get": {
                "description": "Получение информации о человеке по серии и номеру паспорта",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Получение информации о человеке",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Серия паспорта (только цифры)",
                        "name": "passportSerie",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Номер паспорта (только цифры)",
                        "name": "passportNumber",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Информация о человеке",
                        "schema": {
                            "$ref": "#/definitions/dto.Person"
                        }
                    },
                    "400": {
                        "description": "Неверный формат серии или номера паспорта",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/people": {
            "get": {
                "description": "Получение списка людей с возможностью фильтрации по различным полям и пагинацией",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Получение списка людей с фильтрацией и пагинацией",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Фамилия человека",
                        "name": "surname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Имя человека",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Отчество человека",
                        "name": "patronymic",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Адрес человека",
                        "name": "address",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Номер паспорта человека",
                        "name": "passport_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Номер страницы (по умолчанию 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Количество записей на странице (по умолчанию 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список людей",
                        "schema": {
                            "$ref": "#/definitions/models.PeopleResp"
                        }
                    },
                    "400": {
                        "description": "Некорректные параметры запроса",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Создание новой записи о человеке по номеру паспорта",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Создание человека",
                "parameters": [
                    {
                        "description": "Паспортные данные",
                        "name": "passport",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Passport"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Person"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Конфликт данных",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/people/{uuidP}/{uuidT}/complete": {
            "get": {
                "description": "Завершает задачу для человека по его UUID и UUID задачи",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Завершение задачи для человека",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID человека",
                        "name": "uuidP",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UUID задачи",
                        "name": "uuidT",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное завершение задачи",
                        "schema": {
                            "$ref": "#/definitions/models.Ok"
                        }
                    },
                    "400": {
                        "description": "Некорректные параметры запроса",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Человек или задача с указанным UUID не найдены",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/people/{uuidP}/{uuidT}/pause": {
            "get": {
                "description": "Приостанавливает таймер для задачи указанного человека по его UUID и UUID задачи",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Приостановка таймера для задачи",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID человека",
                        "name": "uuidP",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UUID задачи",
                        "name": "uuidT",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешная приостановка таймера для задачи",
                        "schema": {
                            "$ref": "#/definitions/models.Ok"
                        }
                    },
                    "400": {
                        "description": "Некорректные параметры запроса",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Человек или задача с указанным UUID не найдены",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/people/{uuidP}/{uuidT}/start": {
            "get": {
                "description": "Начинает таймер для задачи указанного человека по его UUID и UUID задачи",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Начало таймера для задачи",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID человека",
                        "name": "uuidP",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UUID задачи",
                        "name": "uuidT",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное начало таймера для задачи",
                        "schema": {
                            "$ref": "#/definitions/models.Ok"
                        }
                    },
                    "400": {
                        "description": "Некорректные параметры запроса",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Человек или задача с указанным UUID не найдены",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/people/{uuid}": {
            "get": {
                "description": "Получение информации о человеке по его уникальному идентификатору",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Получение информации о человеке по UUID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Уникальный идентификатор человека (UUID)",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Информация о человеке",
                        "schema": {
                            "$ref": "#/definitions/dto.Person"
                        }
                    },
                    "400": {
                        "description": "Неверный формат UUID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Человек с указанным UUID не найден",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаление записи о человеке по UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Удаление человека",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID человека для удаления",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Ok"
                        }
                    },
                    "400": {
                        "description": "Неверный UUID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Человек не найден",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Обновляет информацию о человеке по его UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Обновление информации о человеке",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID человека",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Информация о человеке для обновления",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Person"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Обновленная информация о человеке",
                        "schema": {
                            "$ref": "#/definitions/dto.Person"
                        }
                    },
                    "400": {
                        "description": "Некорректные параметры запроса",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Человек с указанным UUID не найден",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/people/{uuid}/create-task": {
            "post": {
                "description": "Создает новую задачу для человека по его UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Создание новой задачи для человека",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID человека",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для создания задачи",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TaskCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Созданная задача",
                        "schema": {
                            "$ref": "#/definitions/models.Ok"
                        }
                    },
                    "400": {
                        "description": "Некорректные параметры запроса",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Человек с указанным UUID не найден",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/people/{uuid}/worktime": {
            "post": {
                "description": "Возвращает список задач с временем работы в указанном диапазоне для указанного человека по его UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Получение списка задач с временем работы",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID человека",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Временной диапазон",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DateStartEnd"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список задач с временем работы",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.TaskTimeResult"
                            }
                        }
                    },
                    "400": {
                        "description": "Некорректные параметры запроса",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Человек с указанным UUID не найден или нет задач в указанном диапазоне",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.Passport": {
            "type": "object",
            "properties": {
                "passportNumber": {
                    "type": "string"
                }
            }
        },
        "dto.Person": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "passportNumber": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "dto.TaskTimeResult": {
            "type": "object",
            "properties": {
                "idtask": {
                    "type": "string"
                },
                "task_name": {
                    "type": "string"
                },
                "total_time": {
                    "type": "string"
                }
            }
        },
        "models.DateStartEnd": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "string"
                },
                "start": {
                    "type": "string"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.Ok": {
            "type": "object",
            "properties": {
                "msg": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "models.PeopleResp": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "people": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Person"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "models.TaskCreate": {
            "type": "object",
            "properties": {
                "idPerson": {
                    "type": "string"
                },
                "task_name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
